from django.db import models, transaction
from django.contrib.auth.models import User
from resources.venues.models import Venue
from django.http import HttpResponse


class Day(models.Model):
    # primary key is auto generated by django
    creator = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100, null=False)
    description = models.TextField(null=True, blank=True)
    is_active = models.BooleanField("is_active", default=True)

    # For reference on django transactions,
    # see: https://docs.djangoproject.com/en/3.2/topics/db/transactions/#django.db.transaction.atomic # noqa: E501
    def delete_dayvenue(self, pk):
        with transaction.atomic():
            deleted_dv = DayVenue.objects.get(pk=pk)
            deleted_pos = deleted_dv.pos
            deleted_dv.delete()
            # The `order_by("pos")` may not be needed here, because of the Meta class
            # that automatically orders DayVenues.  It is left here for clarity
            for dv in self.dayvenue_set.filter(pos__gt=deleted_pos).order_by("pos"):
                dv.pos = dv.pos - 1
                dv.save()

    def day_venue_up(request, day_venues, dv_id):
        with transaction.atomic():
            curr = DayVenue.objects.get(pk=dv_id)
            try:
                # if there's no such next, it will raise an error
                next = day_venues.get(pos=curr.pos - 1)
            except Exception as e:
                return HttpResponse("Error Code: %s" % e)
            tmp = curr.pos
            curr.pos = next.pos
            next.pos = tmp
            curr.save()
            next.save()

    def day_venue_down(request, day_venues, dv_id):
        with transaction.atomic():
            curr = DayVenue.objects.get(pk=dv_id)
            try:
                # if there's no such next, it will raise an error
                next = day_venues.get(pos=curr.pos + 1)
            except Exception as e:
                return HttpResponse("Error Code: %s" % e)
            tmp = curr.pos
            curr.pos = next.pos
            next.pos = tmp
            curr.save()
            next.save()

    def fork(self, creator):
        with transaction.atomic():
            new_day = Day.objects.create(
                creator=creator, name=self.name, description=self.description
            )

            for dv in self.dayvenue_set.all():
                DayVenue.objects.create(day=new_day, venue=dv.venue, pos=dv.pos)

        return new_day


class DayVenue(models.Model):
    class Meta:
        ordering = ["pos"]

    day = models.ForeignKey(Day, on_delete=models.CASCADE)
    venue = models.ForeignKey(Venue, on_delete=models.CASCADE)
    pos = models.IntegerField()


class FavoriteDay(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    day = models.ForeignKey(Day, on_delete=models.CASCADE)
    created_at = models.TimeField("Created at", auto_now_add=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["user", "day"], name="favoriteday_unique_user_day"
            )
        ]
